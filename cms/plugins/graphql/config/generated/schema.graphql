input createEventInput {
  data: EventInput
}

type createEventPayload {
  event: Event
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSpeakerInput {
  data: SpeakerInput
}

type createSpeakerPayload {
  speaker: Speaker
}

input createTalkInput {
  data: TalkInput
}

type createTalkPayload {
  talk: Talk
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteEventInput {
  where: InputID
}

type deleteEventPayload {
  event: Event
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSpeakerInput {
  where: InputID
}

type deleteSpeakerPayload {
  speaker: Speaker
}

input deleteTalkInput {
  where: InputID
}

type deleteTalkPayload {
  talk: Talk
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editEventInput {
  event_title: String
  event_date: DateTime
  event_image: ID
  talks: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSpeakerInput {
  speaker_name: String
  speaker_photo: ID
  speaker_biography: String
  talks: [ID]
  speaker_job: String
}

input editTalkInput {
  talk_name: String
  talk_description: String
  talk_time: DateTime
  speakers: [ID]
  events: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type Event {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  event_title: String!
  event_date: DateTime!
  event_image: UploadFile
  talks(sort: String, limit: Int, start: Int, where: JSON): [Talk]
}

type EventAggregator {
  count: Int
  totalCount: Int
}

type EventConnection {
  values: [Event]
  groupBy: EventGroupBy
  aggregate: EventAggregator
}

type EventConnection_id {
  key: ID
  connection: EventConnection
}

type EventConnectionCreatedAt {
  key: DateTime
  connection: EventConnection
}

type EventConnectionEvent_date {
  key: DateTime
  connection: EventConnection
}

type EventConnectionEvent_image {
  key: ID
  connection: EventConnection
}

type EventConnectionEvent_title {
  key: String
  connection: EventConnection
}

type EventConnectionId {
  key: ID
  connection: EventConnection
}

type EventConnectionUpdatedAt {
  key: DateTime
  connection: EventConnection
}

type EventGroupBy {
  _id: [EventConnection_id]
  id: [EventConnectionId]
  createdAt: [EventConnectionCreatedAt]
  updatedAt: [EventConnectionUpdatedAt]
  event_title: [EventConnectionEvent_title]
  event_date: [EventConnectionEvent_date]
  event_image: [EventConnectionEvent_image]
}

input EventInput {
  event_title: String!
  event_date: DateTime!
  event_image: ID
  talks: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Event | createEventPayload | updateEventPayload | deleteEventPayload | EventConnection | EventAggregator | EventGroupBy | EventConnection_id | EventConnectionId | EventConnectionCreatedAt | EventConnectionUpdatedAt | EventConnectionEvent_title | EventConnectionEvent_date | EventConnectionEvent_image | Speaker | createSpeakerPayload | updateSpeakerPayload | deleteSpeakerPayload | SpeakerConnection | SpeakerAggregator | SpeakerGroupBy | SpeakerConnection_id | SpeakerConnectionId | SpeakerConnectionCreatedAt | SpeakerConnectionUpdatedAt | SpeakerConnectionSpeaker_name | SpeakerConnectionSpeaker_photo | SpeakerConnectionSpeaker_biography | SpeakerConnectionSpeaker_job | Talk | createTalkPayload | updateTalkPayload | deleteTalkPayload | TalkConnection | TalkAggregator | TalkGroupBy | TalkConnection_id | TalkConnectionId | TalkConnectionCreatedAt | TalkConnectionUpdatedAt | TalkConnectionTalk_name | TalkConnectionTalk_description | TalkConnectionTalk_time | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createEvent(input: createEventInput): createEventPayload
  updateEvent(input: updateEventInput): updateEventPayload
  deleteEvent(input: deleteEventInput): deleteEventPayload
  createSpeaker(input: createSpeakerInput): createSpeakerPayload
  updateSpeaker(input: updateSpeakerInput): updateSpeakerPayload
  deleteSpeaker(input: deleteSpeakerInput): deleteSpeakerPayload
  createTalk(input: createTalkInput): createTalkPayload
  updateTalk(input: updateTalkInput): updateTalkPayload
  deleteTalk(input: deleteTalkInput): deleteTalkPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  event(id: ID!): Event
  events(sort: String, limit: Int, start: Int, where: JSON): [Event]
  eventsConnection(sort: String, limit: Int, start: Int, where: JSON): EventConnection
  speaker(id: ID!): Speaker
  speakers(sort: String, limit: Int, start: Int, where: JSON): [Speaker]
  speakersConnection(sort: String, limit: Int, start: Int, where: JSON): SpeakerConnection
  talk(id: ID!): Talk
  talks(sort: String, limit: Int, start: Int, where: JSON): [Talk]
  talksConnection(sort: String, limit: Int, start: Int, where: JSON): TalkConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Speaker {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  speaker_name: String!
  speaker_photo: UploadFile
  speaker_biography: String
  speaker_job: String
  talks(sort: String, limit: Int, start: Int, where: JSON): [Talk]
}

type SpeakerAggregator {
  count: Int
  totalCount: Int
}

type SpeakerConnection {
  values: [Speaker]
  groupBy: SpeakerGroupBy
  aggregate: SpeakerAggregator
}

type SpeakerConnection_id {
  key: ID
  connection: SpeakerConnection
}

type SpeakerConnectionCreatedAt {
  key: DateTime
  connection: SpeakerConnection
}

type SpeakerConnectionId {
  key: ID
  connection: SpeakerConnection
}

type SpeakerConnectionSpeaker_biography {
  key: String
  connection: SpeakerConnection
}

type SpeakerConnectionSpeaker_job {
  key: String
  connection: SpeakerConnection
}

type SpeakerConnectionSpeaker_name {
  key: String
  connection: SpeakerConnection
}

type SpeakerConnectionSpeaker_photo {
  key: ID
  connection: SpeakerConnection
}

type SpeakerConnectionUpdatedAt {
  key: DateTime
  connection: SpeakerConnection
}

type SpeakerGroupBy {
  _id: [SpeakerConnection_id]
  id: [SpeakerConnectionId]
  createdAt: [SpeakerConnectionCreatedAt]
  updatedAt: [SpeakerConnectionUpdatedAt]
  speaker_name: [SpeakerConnectionSpeaker_name]
  speaker_photo: [SpeakerConnectionSpeaker_photo]
  speaker_biography: [SpeakerConnectionSpeaker_biography]
  speaker_job: [SpeakerConnectionSpeaker_job]
}

input SpeakerInput {
  speaker_name: String!
  speaker_photo: ID
  speaker_biography: String
  talks: [ID]
  speaker_job: String
}

type Talk {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  talk_name: String
  talk_description: String
  talk_time: DateTime!
  speakers(sort: String, limit: Int, start: Int, where: JSON): [Speaker]
  events(sort: String, limit: Int, start: Int, where: JSON): [Event]
}

type TalkAggregator {
  count: Int
  totalCount: Int
}

type TalkConnection {
  values: [Talk]
  groupBy: TalkGroupBy
  aggregate: TalkAggregator
}

type TalkConnection_id {
  key: ID
  connection: TalkConnection
}

type TalkConnectionCreatedAt {
  key: DateTime
  connection: TalkConnection
}

type TalkConnectionId {
  key: ID
  connection: TalkConnection
}

type TalkConnectionTalk_description {
  key: String
  connection: TalkConnection
}

type TalkConnectionTalk_name {
  key: String
  connection: TalkConnection
}

type TalkConnectionTalk_time {
  key: DateTime
  connection: TalkConnection
}

type TalkConnectionUpdatedAt {
  key: DateTime
  connection: TalkConnection
}

type TalkGroupBy {
  _id: [TalkConnection_id]
  id: [TalkConnectionId]
  createdAt: [TalkConnectionCreatedAt]
  updatedAt: [TalkConnectionUpdatedAt]
  talk_name: [TalkConnectionTalk_name]
  talk_description: [TalkConnectionTalk_description]
  talk_time: [TalkConnectionTalk_time]
}

input TalkInput {
  talk_name: String
  talk_description: String
  talk_time: DateTime!
  speakers: [ID]
  events: [ID]
}

input updateEventInput {
  where: InputID
  data: editEventInput
}

type updateEventPayload {
  event: Event
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSpeakerInput {
  where: InputID
  data: editSpeakerInput
}

type updateSpeakerPayload {
  speaker: Speaker
}

input updateTalkInput {
  where: InputID
  data: editTalkInput
}

type updateTalkPayload {
  talk: Talk
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
